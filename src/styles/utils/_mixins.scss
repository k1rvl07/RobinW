@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

@use './maps.scss' as *;

@mixin respond-to($media) {
  @if map.has-key($breakpoints-map, $media) {
    @media (min-width: map.get($breakpoints-map, $media)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$media}`. "
            + "Available breakpoints are: #{map.keys($breakpoints)}.";
  }
}

@mixin size($types, $values...) {
  $types-list: if(meta.type-of($types) == 'list', $types, ($types));
  $value-index: 1;

  @each $type in $types-list {
    @if $type == 'default' {
      $width: if(
        list.length($values) >= $value-index,
        list.nth($values, $value-index),
        null
      );
      $height: if(
        list.length($values) >= $value-index + 1,
        list.nth($values, $value-index + 1),
        null
      );
      width: $width;
      height: $height;
      $value-index: $value-index + 2;
    } @else if $type == 'min' {
      $min-width: if(
        list.length($values) >= $value-index,
        list.nth($values, $value-index),
        null
      );
      $min-height: if(
        list.length($values) >= $value-index + 1,
        list.nth($values, $value-index + 1),
        null
      );
      min-width: $min-width;
      min-height: $min-height;
      $value-index: $value-index + 2;
    } @else if $type == 'max' {
      $max-width: if(
        list.length($values) >= $value-index,
        list.nth($values, $value-index),
        null
      );
      $max-height: if(
        list.length($values) >= $value-index + 1,
        list.nth($values, $value-index + 1),
        null
      );
      max-width: $max-width;
      max-height: $max-height;
      $value-index: $value-index + 2;
    } @else {
      @error "Invalid size type: #{$type}. Use 'default', 'min', or 'max'.";
    }
  }
}

@mixin flex(
  $flex: on,
  $direction: null,
  $justify: null,
  $align-content: null,
  $align-items: null,
  $wrap: null,
  $gap: null
) {
  @if $flex == on {
    display: flex;
  }

  @if $direction != null {
    flex-direction: $direction;
  }

  @if $justify != null {
    justify-content: $justify;
  }

  @if $align-content != null {
    align-content: $align-content;
  }

  @if $align-items != null {
    align-items: $align-items;
  }

  @if $wrap != null {
    flex-wrap: $wrap;
  }

  @if $gap != null {
    gap: $gap;
  }
}

@mixin flex-item-alignment(
  $align-self: null,
  $justify-self: null,
  $flex-grow: null,
  $flex-shrink: null,
  $flex-basis: null,
  $order: null
) {
  @if $align-self != null {
    align-self: $align-self;
  }

  @if $justify-self != null {
    justify-self: $justify-self;
  }

  @if $flex-grow != null {
    flex-grow: $flex-grow;
  }

  @if $flex-shrink != null {
    flex-shrink: $flex-shrink;
  }

  @if $flex-basis != null {
    flex-basis: $flex-basis;
  }

  @if $order != null {
    order: $order;
  }
}

@mixin grid(
  $on: null,
  $rows: null,
  $columns: null,
  $areas: null,
  $row-gap: null,
  $column-gap: null,
  $gap: null,
  $justify-items: null,
  $align-items: null,
  $justify-content: null,
  $align-content: null
) {
  @include grid-template(
    $on,
    $rows,
    $columns,
    $areas,
    $row-gap,
    $column-gap,
    $gap
  );
  @include grid-alignment(
    $justify-items,
    $align-items,
    $justify-content,
    $align-content
  );
}

@mixin grid-template(
  $on: null,
  $rows: null,
  $columns: null,
  $areas: null,
  $row-gap: null,
  $column-gap: null,
  $gap: null
) {
  @if $on == on {
    display: grid;
  }
  @if $rows != null {
    grid-template-rows: $rows;
  }
  @if $columns != null {
    grid-template-columns: $columns;
  }
  @if $areas != null {
    grid-template-areas: $areas;
  }
  @if $row-gap != null {
    row-gap: $row-gap;
  }
  @if $column-gap != null {
    column-gap: $column-gap;
  }
  @if $gap != null {
    gap: $gap;
  }
}

@mixin grid-alignment(
  $justify-items: null,
  $align-items: null,
  $justify-content: null,
  $align-content: null
) {
  @if $justify-items != null {
    justify-items: $justify-items;
  }
  @if $align-items != null {
    align-items: $align-items;
  }
  @if $justify-content != null {
    justify-content: $justify-content;
  }
  @if $align-content != null {
    align-content: $align-content;
  }
}

@mixin grid-item-alignment($justify-self: null, $align-self: null) {
  @if $justify-self != null {
    justify-self: $justify-self;
  }

  @if $align-self != null {
    align-self: $align-self;
  }
}

@mixin spacing($types, $sides, $values...) {
  $types-list: if(meta.type-of($types) == 'list', $types, ($types));
  $sides-list: if(meta.type-of($sides) == 'list', $sides, ($sides));

  $value-index: 1;

  @each $type in $types-list {
    @if $type == 'margin' or $type == 'padding' {
      @each $side in $sides-list {
        @if list.length($values) < $value-index {
          @error "Not enough values provided for '#{$side}' side.";
        }

        @if $side == 'all' {
          #{$type}: list.nth($values, $value-index);
        } @else if $side == 'x' {
          #{$type}-left: list.nth($values, $value-index);
          #{$type}-right: list.nth($values, $value-index);
        } @else if $side == 'y' {
          #{$type}-top: list.nth($values, $value-index);
          #{$type}-bottom: list.nth($values, $value-index);
        } @else if list.index('top' 'bottom' 'left' 'right', $side) {
          #{$type}-#{$side}: list.nth($values, $value-index);
        } @else {
          @error "Invalid side: #{$side}. Use 'top', 'bottom', 'left', 'right', 'x', 'y', or 'all'.";
        }

        $value-index: $value-index + 1;
      }
    } @else {
      @error "Invalid type: #{$type}. Use 'margin' or 'padding'.";
    }
  }
}

@mixin border-radius(
  $top-left: null,
  $top-right: null,
  $bottom-right: null,
  $bottom-left: null
) {
  @if $top-left !=
    null and
    $top-right !=
    null and
    $bottom-right !=
    null and
    $bottom-left !=
    null
  {
    border-radius: $top-left $top-right $bottom-right $bottom-left;
  } @else if $top-left != null {
    @if meta.type-of($top-left) == number and math.unit($top-left) != '' {
      border-radius: $top-left;
    }
  }
}

@mixin border(
  $sides: null,
  $width: null,
  $style: null,
  $color: null,
  $radiuses...
) {
  @if $sides == all {
    @if $width != null {
      border-width: $width;
    }
    @if $style != null {
      border-style: $style;
    }
    @if $color != null {
      border-color: $color;
    }
  } @else {
    @each $side in $sides {
      @if $width != null {
        border-#{$side}-width: $width;
      }
      @if $style != null {
        border-#{$side}-style: $style;
      }
      @if $color != null {
        border-#{$side}-color: $color;
      }
    }
  }
  @if list.length($radiuses) > 0 {
    @include border-radius($radiuses...);
  }
}

@mixin image-fit($fit: null, $position: null) {
  object-fit: $fit;
  object-position: $position;
}

@mixin background-image(
  $image-path,
  $repeat: null,
  $size: null,
  $position: null
) {
  background-image: url($image-path);
  background-repeat: $repeat;
  background-size: $size;
  background-position: $position;
}
